y = n / sum(n),
fill = action_type)) +
labs(title = "One Action Sessions. Action Type") +
geom_bar(stat = "identity") +
geom_text(aes(label =
paste(round((n / sum(n) * 100) , 2), "%", sep = "")
),
size = 3,
nudge_y = 0.01) +
scale_y_continuous(labels = scales::percent) +
my_theme +
theme(axis.text.x = element_text(angle = 45,
hjust = 0.6))
ggplot(d_seslevel,
aes(x = max_part)) +
geom_bar()
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
geom_bar()
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
geom_bar() +
coord_cartesian(xlim = c(0, 100))
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
geom_bar() +
coord_cartesian(xlim = c(0, 40))
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
geom_bar() +
coord_cartesian(xlim = c(0, 40)) +
my_theme
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
labs(title = "Part Length of Sessions",
x = "Parts")
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
labs(title = "Part Length of Sessions",
x = "Parts") +
geom_bar() +
coord_cartesian(xlim = c(0, 40)) +
my_theme
ggplot(d_seslevel_1 %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts,
group = bigmatch_ip))
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts,
group = bigmatch_ip))
geom_density(aes(x = min_ts)
ggplot(d_seslevel %>%
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts)) +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = as.POSIXct(min_ts, format="%H:%M:%S"))) +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S"))) +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S"))) +
geom_density(aes(x = as.POSIXct(strftime(max_ts, format="%H:%M:%S"), format="%H:%M:%S"))) +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S"))) +
geom_density(aes(x = as.POSIXct(strftime(max_ts, format="%H:%M:%S"), format="%H:%M:%S"))) +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "red") +
my_theme
View(d_seslevel)
View(d)
ggplot(d %>% filter(max_part == 1) %>%
aes(x = sess_id_in_day)) +
labs(title = "One Action Sessions. session ID in day") +
geom_bar(stat = "identity") +
my_theme +
theme(axis.text.x = element_text(angle = 45,
hjust = 0.6))
ggplot(d %>% filter(max_part == 1),
aes(x = sess_id_in_day)) +
labs(title = "One Action Sessions. session ID in day") +
geom_bar(stat = "identity") +
my_theme
ggplot(d %>% filter(max_part == 1),
aes(x = sess_id_in_day)) +
labs(title = "One Action Sessions. session ID in day") +
geom_bar() +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "red") +
geom_density(aes(x = as.POSIXct(strftime(max_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
my_theme
a <- d_seslevel %>% arrange(bigmatch_ip, session_id, max_ts)
a <- d_seslevel %>% arrange(bigmatch_ip, max_ts)
d_seslevel$min_ts_time <- as.POSIXct(strftime(d_seslevel$min_ts,
format="%H:%M:%S"),
format="%H:%M:%S")
d_seslevel$max_ts_time <- as.POSIXct(strftime(d_seslevel$max_ts,
format="%H:%M:%S"),
format="%H:%M:%S")
write.csv(d_seslevel, "d_seslevel.csv", row.names = F)
ggplot(d_seslevel %>%
ggplot(d_seslevel %>%
geom_density(aes(x = min_ts_time,
geom_density(aes(x = max_ts_time,
geom_density(data = d_seslevel %>%
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time,
color = "red") +
geom_density(aes(x = max_ts_time,
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
my_theme
a <- d_seslevel %>% arrange(bigmatch_ip, max_ts_time)
View(a)
summary((d_seslevel %>% group_by(bigmatch_ip) %>% count())$n)
b <- d_seslevel %>% group_by(bigmatch_ip) %>% count()
ggplot(b) + geom_density(aes(x = n))
nrow(b %>% filter(n > 1))
nrow(b %>% filter(n > 2))
b <- d_seslevel %>% group_by(bigmatch_ip) %>% summarise(n = n(),
has_singels = ifelse(sum(is_single > 0, 1, 0)))
b <- d_seslevel %>% group_by(bigmatch_ip) %>% summarise(n = n(),
has_singels = ifelse(sum(is_single) > 0, 1, 0)))
b <- d_seslevel %>% group_by(bigmatch_ip) %>% summarise(n = n(),
has_singels = ifelse(sum(is_single) > 0, 1, 0))
table( (b %>% filter(n >1))$has_singels )
table( (b %>% filter(n >2))$has_singels )
table( (b %>% filter(n >1))$has_singels )
table(b$has_singels)
ggplot(b) +
geom_density(aes(x = n)) +
facet_wrap(~has_singels) +
my_theme
ggplot(b) +
geom_density(aes(x = n)) +
facet_wrap(~has_singels) +
coord_cartesian(xlim = c(0,8))
ggplot(b) +
geom_density(aes(x = n)) +
facet_wrap(~has_singels) +
coord_cartesian(xlim = c(0,8)) +
my_theme
View(d)
#read data
####################################################################
####You need some of the sets created on PodForecastEpisodes.rmd####
####################################################################
apple <- read.csv("apple.csv")
View(apple)
apple$date_index <- as.Date(apple$date_index)
apple_agg <- group_by(date_index) %>% summarise(auto = sum(auto),
manual = sum(manual),
streams = sum(streams))
apple_agg <- apple %>%
group_by(date_index) %>%
summarise(auto = sum(auto),
manual = sum(manual),
streams = sum(streams))
ggplot(apple_agg) +
geom_line(aes(x = data_index,
y = auto),
color = "red") +
geom_line(aes(x = data_index,
y = manual),
color = "blue") +
geom_line(aes(x = data_index,
y = streams),
color = "black")
ggplot(apple_agg) +
geom_line(aes(x = date_index,
y = auto),
color = "red") +
geom_line(aes(x = date_index,
y = manual),
color = "blue") +
geom_line(aes(x = date_index,
y = streams),
color = "black")
View(apple_agg)
apple_agg <- apple %>%
group_by(date_index) %>%
summarise(auto = sum(auto, na.rm = T),
manual = sum(manual, na.rm = T),
streams = sum(streams, na.rm = T))
ggplot(apple_agg) +
geom_line(aes(x = date_index,
y = auto),
color = "red") +
geom_line(aes(x = date_index,
y = manual),
color = "blue") +
geom_line(aes(x = date_index,
y = streams),
color = "black")
ggplot(apple_agg) +
geom_line(aes(x = date_index,
y = auto),
color = "red") +
geom_line(aes(x = date_index,
y = manual),
color = "blue") +
geom_line(aes(x = date_index,
y = streams),
color = "black") +
my_theme
n_distinct(d$user_id)
n_distinct(d$ip_useragent_hash)
n_distinct(d$ip)
#just checking
d_aggregate <- d %>% group_by(session_id) %>%
summarise(n_ips = n_distinct(ip),
n_user_id = n_distinct(user_id),
n_browser_id = n_distinct(browser_id),
n_device_id = n_distinct(device_id),
n_os_id = n_distinct(os_id),
n_client_id = n_distinct(client_id),
n_user_agent = n_distinct(ip_useragent_hash))
sum(d_aggregate$n_user_id)
d_seslevel <- d %>% group_by(day_session, session_id) %>%
summarise(max_part = max(session_part_id),
max_ts = max(event_timestamp),
min_ts = min(event_timestamp),
ip = first(ip),
user_id = first(user_id),
browser_id = first(browser_id),
device_id = first(device_id),
os_id = first(os_id),
client_id = first(client_id),
user_agent = first(ip_useragent_hash)) %>%
ungroup() %>%
group_by(day_session) %>%
mutate(n_day_sessions = length(session_id)) %>%
ungroup()
d_seslevel$is_single <- ifelse(d_seslevel$max_part == 1, 1, 0)
d_seslevel$min_ts_time <- as.POSIXct(strftime(d_seslevel$min_ts,
format="%H:%M:%S"),
format="%H:%M:%S")
d_seslevel$max_ts_time <- as.POSIXct(strftime(d_seslevel$max_ts,
format="%H:%M:%S"),
format="%H:%M:%S")
(table( (d_seslevel %>% filter(max_part == 1))$n_day_sessions) / nrow(d_seslevel %>% filter(max_part == 1))) *100
print("single")
(table( (d_seslevel %>% filter(max_part == 1))$n_day_sessions) /
nrow(d_seslevel %>% filter(max_part == 1))) *100
print("multiple")
(table( (d_seslevel %>% filter(max_part != 1))$n_day_sessions) /
nrow(d_seslevel %>% filter(max_part != 1))) *100
ggplot(d_seslevel,
aes(x = as.factor(max_part))) +
labs(title = "NUmber of Parts of Sessions",
x = "Parts") +
geom_bar() +
coord_cartesian(xlim = c(0, 40)) +
my_theme
#Check for matches in variables for posterior testing
for(i in c("browser_id",
"device_id",
"os_id",
"client_id",
"ip",
"user_agent",
"user_id")){
varname <- paste(i,"matches",
sep = "_")
d_seslevel <- d_seslevel %>%
left_join(d_seslevel %>%
group_by_(i) %>%
summarise(!!varname := n()),
by = c(i))
}
for(i in colnames(d_seslevel)[grepl("matches",
colnames(d_seslevel))]){
print(ggplot(d_seslevel %>% select(is_single,i),
aes(fill = as.factor(is_single))) +
geom_density(aes_string(x = i),
alpha = 0.5) +
my_theme +
theme(legend.position = "bottom"))
print(i)
print(t.test(x = d_seslevel[d_seslevel$is_single == 1, i][[1]],
y = d_seslevel[d_seslevel$is_single == 0, i][[1]]))
print(t.test(x = d_seslevel[d_seslevel$is_single == 1, i][[1]],
y = d_seslevel[d_seslevel$is_single == 0, i][[1]]))
print(wilcox.test(x = d_seslevel[d_seslevel$is_single == 1, i][[1]],
y = d_seslevel[d_seslevel$is_single == 0, i][[1]]))
}
#logit
summary(glm(as.factor(is_single) ~ browser_id_matches + device_id_matches +
os_id_matches + client_id_matches + ip_matches + user_agent_matches + user_id_matches,
data = d_seslevel, family = "binomial"))
temp <- d_seslevel %>%
group_by(browser_id, device_id, os_id,
client_id, is_single, user_agent, ip) %>%
summarise(unique_ips = n_distinct(user_id))
ggplot(temp) +
geom_density(aes(x= unique_ips,
fill = as.factor(is_single)),
alpha = 0.5) +
coord_cartesian(xlim = c(0, 500)) +
my_theme +
theme(legend.position = "bottom")
View(temp)
ggplot(temp) +
geom_density(aes(x= unique_ips,
fill = as.factor(is_single)),
alpha = 0.5) +
my_theme +
theme(legend.position = "bottom")
temp <- d_seslevel %>%
group_by(browser_id, device_id, os_id,
client_id, is_single, user_agent, ip) %>%
summarise(unique_user_ids = n_distinct(user_id))
ggplot(temp) +
geom_density(aes(x= unique_user_ids,
fill = as.factor(is_single)),
alpha = 0.5) +
coord_cartesian(xlim = c(0, 10)) +
my_theme +
theme(legend.position = "bottom")
#logit
summary(glm(as.factor(is_single) ~ browser_id_matches + device_id_matches +
os_id_matches + client_id_matches + ip_matches +
user_agent_matches + user_id_matches,
data = d_seslevel, family = "binomial"))
d_seslevel$bigmatch <- paste(d_seslevel$browser_id,
d_seslevel$device_id,
d_seslevel$os_id,
d_seslevel$client_id,
d_seslevel$user_agent_matches,
sep = "")
d_seslevel$bigmatch_ip <- paste(d_seslevel$ip,
d_seslevel$browser_id,
d_seslevel$device_id,
d_seslevel$os_id,
d_seslevel$client_id,
d_seslevel$user_agent_matches,
d_seslevel$user_id
sep = "")
d_seslevel$bigmatch_ip <- paste(d_seslevel$ip,
d_seslevel$browser_id,
d_seslevel$device_id,
d_seslevel$os_id,
d_seslevel$client_id,
d_seslevel$user_agent_matches,
d_seslevel$user_id,
sep = "")
div1 <- d_seslevel %>% filter(is_single == 1)
div0 <- d_seslevel %>% filter(is_single == 0)
div1$is_in0 <- div1$bigmatch %in% div0$bigmatch
div0$is_in1 <- div0$bigmatch %in% div1$bigmatch
div1$is_in0ip <- div1$bigmatch_ip %in% div0$bigmatch_ip
div0$is_in1ip <- div0$bigmatch_ip %in% div1$bigmatch_ip
sum(div1$is_in0) / nrow(div1) * 100
sum(div0$is_in1) / nrow(div0) * 100
sum(div1$is_in0ip) / nrow(div1) * 100
sum(div0$is_in1ip) / nrow(div0) * 100
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
scale_y_continuous(labels = function(x) strftime(x, format="%H:%M:%S"))
ggplot(d_seslevel %>%
filter(is_single != 1),
aes(x = min_ts_time)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
scale_y_continuous(labels = function(x) strftime(x, format="%H:%M:%S")) +
my_theme
trftime(d_seslevel$max_ts, format="%H:%M:%S")
strftime(d_seslevel$max_ts, format="%H:%M:%S")
ggplot(d_seslevel %>%
filter(is_single != 1),
aes(x = min_ts_time)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = as.POSIXct(strftime(min_ts, format="%H:%M:%S"), format="%H:%M:%S")),
color = "black") +
my_theme
aes(x = min_ts_time,
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = min_ts_time),
color = "black") +
my_theme
ggplot(d_seslevel %>%
filter(is_single != 1)) +
geom_density(aes(x = min_ts_time),
color = "red") +
geom_density(aes(x = max_ts_time),
color = "blue") +
geom_density(data = d_seslevel %>%
filter(is_single == 1),
aes(x = min_ts_time),
color = "black") +
my_theme
ggplot(b) +
geom_density(aes(x = n)) +
facet_wrap(~has_singels) +
coord_cartesian(xlim = c(0,8)) +
my_theme
a <- d_seslevel %>% arrange(bigmatch_ip, max_ts_time)
b <- d_seslevel %>% group_by(bigmatch_ip) %>%
summarise(n = n(),
has_singels = ifelse(sum(is_single) > 0, 1, 0))
ggplot(b) +
geom_density(aes(x = n)) +
facet_wrap(~has_singels) +
coord_cartesian(xlim = c(0,8)) +
my_theme
apple_agg %>% gather(, var, n, 2:4)
apple_agg %>% gather(var, n, 2:4)
ggplot(apple_agg) +
geom_line(aes(x = date_index,
y = auto,
color = var)) +
my_theme
ggplot(apple_agg) +
geom_line(aes(x = date_index,
y = n,
color = var)) +
my_theme
View(apple_agg)
apple_agg <- apple_agg %>% gather(var, n, 2:4)
ggplot(apple_agg) +
geom_line(aes(x = date_index,
y = n,
color = var)) +
my_theme
apple_agg <- apple %>%
group_by(date_index) %>%
summarise(auto = sum(auto, na.rm = T),
manual = sum(manual, na.rm = T),
streams = sum(streams, na.rm = T))
